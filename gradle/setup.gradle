task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
    group = 'Project Setup'
    gradleVersion = "$gradleVersion"
}

allprojects { subproject ->

    group = 'org.pivotal'

    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'groovy'

    ext.optionalDeps = []
    ext.providedDeps = []

    ext.optional = { optionalDeps << it }
    ext.provided = { providedDeps << it }


    install {
        repositories.mavenInstaller {
            customizePom(pom, subproject)
        }
    }

    task cleanCheck(dependsOn: ['check', 'clean'])

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task groovydocJar(type: Jar) {
        classifier = 'groovydoc'
        from groovydoc
    }


    artifacts {
        archives sourcesJar
        archives groovydocJar
    }
}

def customizePom(def pom, def gradleProject) {
    pom.whenConfigured { generatedPom ->
        // respect 'optional' and 'provided' dependencies
        def deps = gradleProject.configurations.runtime.allDependencies
        def optionalDeps = deps.findAll { dep ->
            dep.asDynamicObject.hasProperty('optional') && dep.optional
        }
        def providedDeps = deps.findAll { dep ->
            dep.asDynamicObject.hasProperty('provided') && dep.provided
        }
        generatedPom.dependencies.each { mavenDep ->
            mavenDep.optional = optionalDeps.any { optionalDep ->
                optionalDep.group == mavenDep.groupId &&
                        optionalDep.name == mavenDep.artifactId &&
                        optionalDep.version == mavenDep.version
            }
            boolean isProvided = providedDeps.any { providedDep ->
                providedDep.group == mavenDep.groupId &&
                        providedDep.name == mavenDep.artifactId &&
                        providedDep.version == mavenDep.version
            }
            if (isProvided) {
                mavenDep.scope = 'provided'
            }
        }

        // eliminate test-scoped dependencies (no need in maven central poms)
        generatedPom.dependencies.removeAll { dep ->
            dep.scope == 'test'
        }

        // add all items necessary for maven central publication
        generatedPom.project {
            name = gradleProject.description
            description = gradleProject.description
            url = 'https://github.com/swilliams-vmw/gemfire-dsl'
            organization {
                name = 'SpringSource'
                url = 'http://springsource.org'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url = 'https://github.com/swilliams-vmw/gemfire-dsl'
                connection = 'scm:git:git://github.com/swilliams-vmw/gemfire-dsl'
                developerConnection = 'scm:git:git://github.com/swilliams-vmw/gemfire-dsl'
            }
            developers {
                developer {
                    id = 'smaldini'
                    name = 'Stephane Maldini'
                    email = 'smaldini@vmware.com'
                }
                developer {
                    id = 'swilliams'
                    name = 'Stuart Williams'
                    email = 'swilliams@vmware.com'
                }
            }
        }
    }
}